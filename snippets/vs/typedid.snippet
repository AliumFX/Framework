<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Strongly Typed ID</Title>
      <Description>Create a strongly typed ID struct</Description>
      <Shortcut>typedid</Shortcut>
      <HelpUrl>https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-2/</HelpUrl>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>TypedId</ID>
          <ToolTip>Replace with the name of your type</ToolTip>
          <Default>TypedId</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[/// <summary>
    /// Represents the ID of a ?
    /// </summary>
    [DebuggerDisplay("{Value}"), JsonConverter(typeof($TypedId$JsonConverter)), TypeConverter(typeof($TypedId$TypeConverter))]
    public readonly struct $TypedId$ : IComparable<$TypedId$>, IEquatable<$TypedId$>, IValueStruct<int>
    {
        /// <summary>
        /// Represents an empty ? ID
        /// </summary>
        public static readonly $TypedId$ Empty = new $TypedId$();

        /// <summary>
        /// Represents the ID of the system
        /// </summary>
        public static readonly $TypedId$ System = new $TypedId$(value: 0);

        private readonly int _value;
        private readonly bool _hasValue;

        /// <summary>
        /// Initialises a new instance of <see cref="$TypedId$" />
        /// </summary>
        /// <param name="value">The ID value</param>
        public $TypedId$(int value)
        {
            _value = value;
            _hasValue = true;
        }

        /// <summary>
        /// Gets whether the ID has value
        /// </summary>
        public bool HasValue => _hasValue;

        /// <summary>
        /// Gets the value
        /// </summary>
        public int Value => _value;

        /// <inheritdoc />
        public int CompareTo($TypedId$ other) => Value.CompareTo(other.Value);

        /// <inheritdoc />
        public bool Equals($TypedId$ other) => (HasValue && other.HasValue && Value.Equals(other.Value)) || (!HasValue && !other.HasValue);

        /// <inheritdoc />
        public override bool Equals(object obj)
        {
            if (obj is null)
            {
                return false;
            }

            return obj is $TypedId$ other && Equals(other);
        }

        /// <inheritdoc />
        public override int GetHashCode() => Value.GetHashCode();

        /// <inheritdoc />
        public override string ToString() => Value.ToString();

        /// <summary>
        /// Provides conversion from another value sourced from another provider, for instance, a database value, or a JSON value
        /// </summary>
        /// <remarks>
        ///     If value is an int, or an int? with a value, a $TypedId$ representing that value is returned.
        ///     All other values will return Empty
        /// </remarks>
        /// <param name="value">The value object</param>
        /// <returns>The <see cref="$TypedId$"/> value</returns>
        public static $TypedId$ FromProviderValue(object value)
        {
            if (value is int intValue)
            {
                return new $TypedId$(intValue);
            }

            return Empty;
        }

        /// <summary>
        /// Determines if the two given values are equal
        /// </summary>
        /// <param name="left">The left operand</param>
        /// <param name="right">The right operand</param>
        /// <returns>True if the values are equal, otherwise false</returns>
        public static bool operator ==($TypedId$ left, $TypedId$ right) => left.Equals(right);

        /// <summary>
        /// Determines if the two given values are not equal
        /// </summary>
        /// <param name="left">The left operand</param>
        /// <param name="right">The right operand</param>
        /// <returns>True if the values are not equal, otherwise false</returns>
        public static bool operator !=($TypedId$ left, $TypedId$ right) => !left.Equals(right);

        class $TypedId$JsonConverter : JsonConverter
        {
            /// <inheritdoc />
            public override bool CanConvert(Type objectType) => objectType == typeof($TypedId$);

            /// <inheritdoc />
            public override object? ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
            {
                int? id = serializer.Deserialize<int?>(reader);
                if (!id.HasValue)
                {
                    return Empty;
                }

                return new $TypedId$(id.Value);
            }

            /// <inheritdoc />
            public override void WriteJson(JsonWriter writer, object source, JsonSerializer serializer)
            {
                if (source is $TypedId$ value)
                {
                    if (value.HasValue)
                    {
                        serializer.Serialize(writer, value.Value);
                        return;
                    }
                }

                serializer.Serialize(writer, null);
            }
        }

        class $TypedId$TypeConverter : TypeConverter
        {
            /// <inheritdoc />
            public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
                => sourceType == typeof(int) || sourceType == typeof(int?);

            /// <inheritdoc />
            public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
            {
                if (value is int intValue)
                {
                    return new $TypedId$(intValue);
                }

                return Empty;
            }
        }
    }
}]>
      </Code>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.ComponentModel</Namespace>
        </Import>
        <Import>
          <Namespace>System.Diagnostics</Namespace>
        </Import>
        <Import>
          <Namespace>System.Globalization</Namespace>
        </Import>
        <Import>
          <Namespace>Newtonsoft.Json</Namespace>
        </Import>
        <Import>
          <Namespace>Alium.Data</Namespace>
        </Import>
      </Imports>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>